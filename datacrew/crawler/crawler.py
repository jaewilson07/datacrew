# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/crawler/crawler.ipynb.

# %% auto 0
__all__ = ['driversetup', 'WaitAndReturn_ElementError', 'wait_and_return', 'authenticate_domo_driver', 'pagesource']

# %% ../../nbs/crawler/crawler.ipynb 2
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from bs4 import BeautifulSoup

# import time


# %% ../../nbs/crawler/crawler.ipynb 3
def driversetup(is_headless: bool = True) -> webdriver:
    options = webdriver.ChromeOptions()
    # run Selenium in headless mode

    if is_headless:
        options.add_argument("--headless")

    options.add_argument("--no-sandbox")

    driver = webdriver.Chrome(options=options)

    return driver

# %% ../../nbs/crawler/crawler.ipynb 4
class WaitAndReturn_ElementError(Exception):
    def __init__(self):
        super.__init__(f"must include element_id or element_ls in WaitAndReturn")

def wait_and_return(
    driver: webdriver,
    element_id: str = None,
    element_ls: [str] = None,
    element_type=By.ID,
    max_sleep_time=15,
    is_return_soup: bool = False,
):
    """
    Wait for the element to be present and return it.
    """

    if not element_id and not element_ls:
        raise WaitAndReturn_ElementError()
    
    try:
        element_str = f".{', .'.join(element_ls)}" if element_ls else element_id
        ele = None

        if element_ls:
            ele = WebDriverWait(driver, timeout=max_sleep_time).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, element_str)))

        else:
            ele = WebDriverWait(driver, timeout=max_sleep_time).until(
                EC.presence_of_element_located(
                    (element_type, element_id))
            )
        
        if is_return_soup:
            return BeautifulSoup(res.get_attribute("innerHTML"), "lxml")
        return ele

    except Exception as e:
        print(e)
        print(
            f"Timeout Exception: {url} did not load within {max_sleep_time} seconds.")


# %% ../../nbs/crawler/crawler.ipynb 7
def authenticate_domo_driver(driver, domo_instance, domo_username, domo_password):

    url = f"https://{domo_instance}.domo.com/auth/index"

    driver.get(url)

    button = wait_and_return(driver, element_id="sign-in",
                             element_type=By.CLASS_NAME, max_sleep_time=10)

    form_username = wait_and_return(driver, "username", element_type=By.NAME)

    form_password = wait_and_return(driver, "password", element_type=By.NAME)


    # Sending input
    form_username.clear()
    form_username.send_keys(domo_username)
    form_password.clear()
    form_password.send_keys(domo_password)
    button.click()

    return driver

# %% ../../nbs/crawler/crawler.ipynb 10
def pagesource(
    url: str,
    driver: webdriver = None,
    element_id: str = None,
    element_ls: [str] = None,
    element_type=By.ID,
    max_sleep_time = 15,
    is_return_soup: bool = False,
):
    is_driver_close = False if driver else True
    driver = driver or driversetup()

    print(f"ðŸ’¤ retrieving {url} ðŸ’¤")
    driver.get(url)

    try:
        if element_id or element_ls:
            wait_and_return(
                driver = driver,
                element_id = element_id,
                element_ls = element_ls,
                element_type = element_type,
                max_sleep_time = max_sleep_time,
            )

        if is_return_soup:
            return BeautifulSoup(driver.page_source, "lxml")
        
        return driver.page_source
    
    except Exception as e:
        print(e)

    finally:
        if is_driver_close:
            driver.close()


function TOC_main() {
  /* main function
      handles upsert documents
      updates document names
      updates the children column based on parent column
      updates document Links list based on children column
      */

  // Get the active spreadsheet and the first sheet
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheets()[0];
  var rows = sheet.getDataRange().getValues();

  // Iterate over each row
  for (var row_idx = 1; row_idx < rows.length; row_idx++) {
    var title = rows[row_idx][0];
    var doc_id = rows[row_idx][1];

    if (!doc_id) {
      doc = DR_insertGoogleDoc(title);
      doc_id = doc.get_id();

      // Update the row with the new doc ID
      sheet.getRange(row_idx + 1, 2).setValue(doc_id);
    } else {
      // If the docId is not empty, update the name of the Google Doc
      var file = DriveApp.getFileById(doc_id);
      file.setName(title);
    }
  }
  TOC_main_SS_updateChildrenColumn();
  TOC_main_SS_updateGoogleDocs();
}

function TOC_main_SS_updateChildrenColumn() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheets()[0];
  var rows = sheet.getDataRange().getValues();

  // Write the docChildren results to the 4th column as JSON
  for (var row_idx = 1; row_idx < rows.length; row_idx++) {
    var row = rows[row_idx];
    var docId = row[1]; // Assuming DocId is in the second column
    var children = TOC_SS_searchChildrenOfParent(rows, docId);
    sheet.getRange(row_idx + 1, 4).setValue("[" + children.join(", ") + "]"); // Assuming the new column is the fourth column
  }
}

function TOC_main_SS_updateGoogleDocs() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheets()[0];
  var rows = sheet.getDataRange().getValues();

  // Skip the header row
  for (var row_idx = 1; row_idx < rows.length; row_idx++) {
    var row = rows[row_idx];

    var docId = row[1];
    var childrenJson = JSON.parse(row[3]);

    var children = childrenJson.map(function (child) {
      return [child.docId, child.docName];
    });

    TOC_DC_updateLinksSection(docId, children);
  }
}

function TOC_SS_searchChildrenOfParent(rows, parentDocId) {
  var children = rows
    .filter((row) => row[2] === parentDocId)
    .map((row) => JSON.stringify({ docId: row[1], docName: row[0] }));
  return children;
}

function TOC_DC_generateDefaultParaStr() {
  // Initialize the links body
  var now = new Date();
  var date = now.toLocaleDateString();
  var time = now.toLocaleTimeString();

  // Initialize the body with the first line
  return "<<Autogenerated " + date + " " + time + ">>\n\n";
}

function TOC_DC_updateLinksSection(docId, childrenTuplesList) {
  linksBody = TOC_DC_generateDefaultParaStr();

  baseContent = "No links associated with this document\n\n";

  if (childrenTuplesList.length != 0) {
    baseContent = generateGoogleDocsLinksStr(
      // [['123', 'my favorite doc'], ['234ab','good stuff my friend']]
      childrenTuplesList
    );
  }

  linksBody += baseContent;

  replaceSectionInGoogleDoc(
    (docId = docId),
    (headerName = "Links"),
    (headerType = DocumentApp.ParagraphHeading.HEADING1),
    (replacementContent = linksBody)
  );

  convertMarkdownUrls((docId = docId));
}
